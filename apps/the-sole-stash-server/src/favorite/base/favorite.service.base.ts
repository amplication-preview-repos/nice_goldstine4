/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Favorite as PrismaFavorite } from "@prisma/client";

export class FavoriteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FavoriteCountArgs, "select">): Promise<number> {
    return this.prisma.favorite.count(args);
  }

  async favorites<T extends Prisma.FavoriteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteFindManyArgs>
  ): Promise<PrismaFavorite[]> {
    return this.prisma.favorite.findMany<Prisma.FavoriteFindManyArgs>(args);
  }
  async favorite<T extends Prisma.FavoriteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteFindUniqueArgs>
  ): Promise<PrismaFavorite | null> {
    return this.prisma.favorite.findUnique(args);
  }
  async createFavorite<T extends Prisma.FavoriteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteCreateArgs>
  ): Promise<PrismaFavorite> {
    return this.prisma.favorite.create<T>(args);
  }
  async updateFavorite<T extends Prisma.FavoriteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteUpdateArgs>
  ): Promise<PrismaFavorite> {
    return this.prisma.favorite.update<T>(args);
  }
  async deleteFavorite<T extends Prisma.FavoriteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteDeleteArgs>
  ): Promise<PrismaFavorite> {
    return this.prisma.favorite.delete(args);
  }
}
