/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NewArrivalService } from "../newArrival.service";
import { NewArrivalCreateInput } from "./NewArrivalCreateInput";
import { NewArrival } from "./NewArrival";
import { NewArrivalFindManyArgs } from "./NewArrivalFindManyArgs";
import { NewArrivalWhereUniqueInput } from "./NewArrivalWhereUniqueInput";
import { NewArrivalUpdateInput } from "./NewArrivalUpdateInput";

export class NewArrivalControllerBase {
  constructor(protected readonly service: NewArrivalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NewArrival })
  async createNewArrival(
    @common.Body() data: NewArrivalCreateInput
  ): Promise<NewArrival> {
    return await this.service.createNewArrival({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NewArrival] })
  @ApiNestedQuery(NewArrivalFindManyArgs)
  async newArrivals(@common.Req() request: Request): Promise<NewArrival[]> {
    const args = plainToClass(NewArrivalFindManyArgs, request.query);
    return this.service.newArrivals({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NewArrival })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async newArrival(
    @common.Param() params: NewArrivalWhereUniqueInput
  ): Promise<NewArrival | null> {
    const result = await this.service.newArrival({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NewArrival })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNewArrival(
    @common.Param() params: NewArrivalWhereUniqueInput,
    @common.Body() data: NewArrivalUpdateInput
  ): Promise<NewArrival | null> {
    try {
      return await this.service.updateNewArrival({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NewArrival })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNewArrival(
    @common.Param() params: NewArrivalWhereUniqueInput
  ): Promise<NewArrival | null> {
    try {
      return await this.service.deleteNewArrival({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
