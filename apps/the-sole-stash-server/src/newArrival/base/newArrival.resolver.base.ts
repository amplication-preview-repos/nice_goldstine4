/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NewArrival } from "./NewArrival";
import { NewArrivalCountArgs } from "./NewArrivalCountArgs";
import { NewArrivalFindManyArgs } from "./NewArrivalFindManyArgs";
import { NewArrivalFindUniqueArgs } from "./NewArrivalFindUniqueArgs";
import { DeleteNewArrivalArgs } from "./DeleteNewArrivalArgs";
import { NewArrivalService } from "../newArrival.service";
@graphql.Resolver(() => NewArrival)
export class NewArrivalResolverBase {
  constructor(protected readonly service: NewArrivalService) {}

  async _newArrivalsMeta(
    @graphql.Args() args: NewArrivalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NewArrival])
  async newArrivals(
    @graphql.Args() args: NewArrivalFindManyArgs
  ): Promise<NewArrival[]> {
    return this.service.newArrivals(args);
  }

  @graphql.Query(() => NewArrival, { nullable: true })
  async newArrival(
    @graphql.Args() args: NewArrivalFindUniqueArgs
  ): Promise<NewArrival | null> {
    const result = await this.service.newArrival(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NewArrival)
  async deleteNewArrival(
    @graphql.Args() args: DeleteNewArrivalArgs
  ): Promise<NewArrival | null> {
    try {
      return await this.service.deleteNewArrival(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
