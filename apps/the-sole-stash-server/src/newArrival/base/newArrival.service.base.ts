/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NewArrival as PrismaNewArrival } from "@prisma/client";

export class NewArrivalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NewArrivalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.newArrival.count(args);
  }

  async newArrivals<T extends Prisma.NewArrivalFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewArrivalFindManyArgs>
  ): Promise<PrismaNewArrival[]> {
    return this.prisma.newArrival.findMany<Prisma.NewArrivalFindManyArgs>(args);
  }
  async newArrival<T extends Prisma.NewArrivalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewArrivalFindUniqueArgs>
  ): Promise<PrismaNewArrival | null> {
    return this.prisma.newArrival.findUnique(args);
  }
  async createNewArrival<T extends Prisma.NewArrivalCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewArrivalCreateArgs>
  ): Promise<PrismaNewArrival> {
    return this.prisma.newArrival.create<T>(args);
  }
  async updateNewArrival<T extends Prisma.NewArrivalUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewArrivalUpdateArgs>
  ): Promise<PrismaNewArrival> {
    return this.prisma.newArrival.update<T>(args);
  }
  async deleteNewArrival<T extends Prisma.NewArrivalDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewArrivalDeleteArgs>
  ): Promise<PrismaNewArrival> {
    return this.prisma.newArrival.delete(args);
  }
}
