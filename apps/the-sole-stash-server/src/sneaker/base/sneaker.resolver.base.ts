/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sneaker } from "./Sneaker";
import { SneakerCountArgs } from "./SneakerCountArgs";
import { SneakerFindManyArgs } from "./SneakerFindManyArgs";
import { SneakerFindUniqueArgs } from "./SneakerFindUniqueArgs";
import { DeleteSneakerArgs } from "./DeleteSneakerArgs";
import { SneakerService } from "../sneaker.service";
@graphql.Resolver(() => Sneaker)
export class SneakerResolverBase {
  constructor(protected readonly service: SneakerService) {}

  async _sneakersMeta(
    @graphql.Args() args: SneakerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sneaker])
  async sneakers(
    @graphql.Args() args: SneakerFindManyArgs
  ): Promise<Sneaker[]> {
    return this.service.sneakers(args);
  }

  @graphql.Query(() => Sneaker, { nullable: true })
  async sneaker(
    @graphql.Args() args: SneakerFindUniqueArgs
  ): Promise<Sneaker | null> {
    const result = await this.service.sneaker(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sneaker)
  async deleteSneaker(
    @graphql.Args() args: DeleteSneakerArgs
  ): Promise<Sneaker | null> {
    try {
      return await this.service.deleteSneaker(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
