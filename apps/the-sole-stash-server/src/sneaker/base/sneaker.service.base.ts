/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sneaker as PrismaSneaker } from "@prisma/client";

export class SneakerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SneakerCountArgs, "select">): Promise<number> {
    return this.prisma.sneaker.count(args);
  }

  async sneakers<T extends Prisma.SneakerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SneakerFindManyArgs>
  ): Promise<PrismaSneaker[]> {
    return this.prisma.sneaker.findMany<Prisma.SneakerFindManyArgs>(args);
  }
  async sneaker<T extends Prisma.SneakerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SneakerFindUniqueArgs>
  ): Promise<PrismaSneaker | null> {
    return this.prisma.sneaker.findUnique(args);
  }
  async createSneaker<T extends Prisma.SneakerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SneakerCreateArgs>
  ): Promise<PrismaSneaker> {
    return this.prisma.sneaker.create<T>(args);
  }
  async updateSneaker<T extends Prisma.SneakerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SneakerUpdateArgs>
  ): Promise<PrismaSneaker> {
    return this.prisma.sneaker.update<T>(args);
  }
  async deleteSneaker<T extends Prisma.SneakerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SneakerDeleteArgs>
  ): Promise<PrismaSneaker> {
    return this.prisma.sneaker.delete(args);
  }
}
