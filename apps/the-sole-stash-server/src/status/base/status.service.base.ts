/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Status as PrismaStatus } from "@prisma/client";

export class StatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StatusCountArgs, "select">): Promise<number> {
    return this.prisma.status.count(args);
  }

  async statuses<T extends Prisma.StatusFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatusFindManyArgs>
  ): Promise<PrismaStatus[]> {
    return this.prisma.status.findMany<Prisma.StatusFindManyArgs>(args);
  }
  async status<T extends Prisma.StatusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatusFindUniqueArgs>
  ): Promise<PrismaStatus | null> {
    return this.prisma.status.findUnique(args);
  }
  async createStatus<T extends Prisma.StatusCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatusCreateArgs>
  ): Promise<PrismaStatus> {
    return this.prisma.status.create<T>(args);
  }
  async updateStatus<T extends Prisma.StatusUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatusUpdateArgs>
  ): Promise<PrismaStatus> {
    return this.prisma.status.update<T>(args);
  }
  async deleteStatus<T extends Prisma.StatusDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatusDeleteArgs>
  ): Promise<PrismaStatus> {
    return this.prisma.status.delete(args);
  }
}
